{"version":3,"sources":["Home/index.jsx","Home/utils.js","Home/Banner0.jsx","Home/data.source.js","serviceWorker.js","index.js"],"names":["isMobile","isImg","Banner","currentProps","Object","esm_extends","this","props","dataSource","_react_16_8_6_react_default","a","createElement","assign","wrapper","es","key","type","delay","textWrapper","title","children","match","src","width","alt","content","_rc_tween_one_2_4_1_rc_tween_one_es","animation","y","yoyo","repeat","duration","className","icon","React","PureComponent","Banner00DataSource","Fragment","button","enquireScreen","b","location","window","Home","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","show","port","_this2","setState","setTimeout","_this3","Banner0","id","ref","d","dom","Component","Boolean","hostname","ReactDOM","render","Home_Home","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2HAUIA,kICLSC,sBAAQ,qDC8CNC,mLA5CJ,IACIC,EADJC,OAAAC,EAAA,EAAAD,CAAA,GACqBE,KAAKC,OACzBC,EAAeL,EAAfK,WAGR,cAFOL,EAAaK,kBACbL,EAAaH,SAElBS,EAAAC,EAAAC,cAAA,MAAAP,OAAAQ,OAAA,GAAST,EAAkBK,EAAWK,SACpCJ,EAAAC,EAAAC,cAACG,EAAA,EAADV,OAAAQ,OAAA,CACEG,IAAI,YACJC,KAAM,CAAC,SAAU,OACjBC,MAAO,KACHT,EAAWU,aAEfT,EAAAC,EAAAC,cAAA,MAAAP,OAAAQ,OAAA,CAAKG,IAAI,SAAYP,EAAWW,OACQ,kBAA9BX,EAAWW,MAAMC,UACzBZ,EAAWW,MAAMC,SAASC,MAAMpB,GAC9BQ,EAAAC,EAAAC,cAAA,OAAKW,IAAKd,EAAWW,MAAMC,SAAUG,MAAM,OAAOC,IAAI,QAEtDhB,EAAWW,MAAMC,UAGrBX,EAAAC,EAAAC,cAAA,MAAAP,OAAAQ,OAAA,CAAKG,IAAI,WAAcP,EAAWiB,SAC/BjB,EAAWiB,QAAQL,WAMxBX,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACEC,UAAW,CACTC,EAAG,OACHC,MAAM,EACNC,QAAS,EACTC,SAAU,KAEZC,UAAU,eACVjB,IAAI,QAEJN,EAAAC,EAAAC,cAAAsB,EAAA,GAAMjB,KAAK,kBAvCAkB,IAAMC,eCLdC,EAAqB,CAChCvB,QAAS,CAAEmB,UAAW,iCACtBd,YAAa,CAAEc,UAAW,wBAC1Bb,MAAO,CACLa,UAAW,gBACXZ,SACEX,EAAAC,EAAAC,cAAAF,EAAAC,EAAA2B,SAAA,KACE5B,EAAAC,EAAAC,cAAA,iCAINc,QAAS,CACPO,UAAW,kBACXZ,SACEX,EAAAC,EAAAC,cAAAF,EAAAC,EAAA2B,SAAA,KACE5B,EAAAC,EAAAC,cAAA,6FAIN2B,OAAQ,CACNN,UAAW,iBACXZ,SACEX,EAAAC,EAAAC,cAAAF,EAAAC,EAAA2B,SAAA,KACE5B,EAAAC,EAAAC,cAAA,mCHbR4B,wBAAc,SAACC,GACbxC,EAAWwC,QAGLC,EAAaC,OAAbD,SAEaE,cACnB,SAAAA,EAAYpC,GAAO,IAAAqC,EAAA,OAAAxC,OAAAyC,EAAA,EAAAzC,CAAAE,KAAAqC,IACjBC,EAAAxC,OAAA0C,EAAA,EAAA1C,CAAAE,KAAAF,OAAA2C,EAAA,EAAA3C,CAAAuC,GAAAK,KAAA1C,KAAMC,KACD0C,MAAQ,CACXjD,WACAkD,MAAOT,EAASU,MAJDP,mFAQC,IAAAQ,EAAA9C,KAElBiC,wBAAc,SAACC,GACbY,EAAKC,SAAS,CAAErD,WAAYwC,MAI1BC,EAASU,MAEXG,WAAW,WACTF,EAAKC,SAAS,CACZH,MAAM,KAEP,sCAKE,IAAAK,EAAAjD,KACDc,EAAW,CACfX,EAAAC,EAAAC,cAAC6C,EAAD,CACEC,GAAG,YACH1C,IAAI,YACJP,WAAY4B,EACZpC,SAAUM,KAAK2C,MAAMjD,YAGzB,OACES,EAAAC,EAAAC,cAAA,OACEqB,UAAU,oBACV0B,IAAK,SAACC,GACJJ,EAAKK,IAAMD,IAIZrD,KAAK2C,MAAMC,MAAQ9B,UA5CMc,IAAM2B,WILpBC,QACW,cAA7BpB,OAAOD,SAASsB,UAEe,UAA7BrB,OAAOD,SAASsB,UAEhBrB,OAAOD,SAASsB,SAAS1C,MACvB,2DCZN2C,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.84eb728d.chunk.js","sourcesContent":["/* eslint no-undef: 0 */\n/* eslint arrow-parens: 0 */\nimport React from 'react';\nimport { enquireScreen } from 'enquire-js';\n\nimport Banner0 from './Banner0';\n\nimport { Banner00DataSource } from './data.source';\nimport './less/antMotionStyle.less';\n\nlet isMobile;\nenquireScreen((b) => {\n  isMobile = b;\n});\n\nconst { location } = window;\n\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isMobile,\n      show: !location.port, // 如果不是 dva 2.0 请删除\n    };\n  }\n\n  componentDidMount() {\n    // 适配手机屏幕;\n    enquireScreen((b) => {\n      this.setState({ isMobile: !!b });\n    });\n    // dva 2.0 样式在组件渲染之后动态加载，导致滚动组件不生效；线上不影响；\n    /* 如果不是 dva 2.0 请删除 start */\n    if (location.port) {\n      // 样式 build 时间在 200-300ms 之间;\n      setTimeout(() => {\n        this.setState({\n          show: true,\n        });\n      }, 500);\n    }\n    /* 如果不是 dva 2.0 请删除 end */\n  }\n\n  render() {\n    const children = [\n      <Banner0\n        id=\"Banner0_0\"\n        key=\"Banner0_0\"\n        dataSource={Banner00DataSource}\n        isMobile={this.state.isMobile}\n      />,\n    ];\n    return (\n      <div\n        className=\"templates-wrapper\"\n        ref={(d) => {\n          this.dom = d;\n        }}\n      >\n        {/* 如果不是 dva 2.0 替换成 {children} start */}\n        {this.state.show && children}\n        {/* 如果不是 dva 2.0 替换成 {children} end */}\n      </div>\n    );\n  }\n}\n","\nimport React from 'react';\nimport { Button } from 'antd';\n\n// eslint-disable-next-line no-useless-escape\nexport const isImg = /^http(s)?:\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w-.\\/?%&=]*)?/;\nexport const getChildrenToRender = (item, i) => {\n  const tag = item.name.indexOf('title') === 0 ? 'h1' : 'div';\n  let children = typeof item.children === 'string' && item.children.match(isImg)\n    ? React.createElement('img', { src: item.children, alt: 'img' })\n    : item.children;\n  children = typeof item.children === 'object' && item.name.indexOf('button') === 0 ? (\n    React.createElement(Button, {\n      ...item.children,\n    })\n  ) : children;\n  return React.createElement(tag, { key: i.toString(), ...item }, children);\n};\n","import React from 'react';\nimport { Icon } from 'antd';\nimport QueueAnim from 'rc-queue-anim';\nimport TweenOne from 'rc-tween-one';\nimport { isImg } from './utils';\n\nclass Banner extends React.PureComponent {\n  render() {\n    const { ...currentProps } = this.props;\n    const { dataSource } = currentProps;\n    delete currentProps.dataSource;\n    delete currentProps.isMobile;\n    return (\n      <div {...currentProps} {...dataSource.wrapper}>\n        <QueueAnim\n          key=\"QueueAnim\"\n          type={['bottom', 'top']}\n          delay={200}\n          {...dataSource.textWrapper}\n        >\n          <div key=\"title\" {...dataSource.title}>\n            {typeof dataSource.title.children === 'string' &&\n            dataSource.title.children.match(isImg) ? (\n              <img src={dataSource.title.children} width=\"100%\" alt=\"img\" />\n            ) : (\n              dataSource.title.children\n            )}\n          </div>\n          <div key=\"content\" {...dataSource.content}>\n            {dataSource.content.children}\n          </div>\n          {/* <Button ghost key=\"button\" {...dataSource.button}>\n            {dataSource.button.children}\n          </Button> */}\n        </QueueAnim>\n        <TweenOne\n          animation={{\n            y: '-=20',\n            yoyo: true,\n            repeat: -1,\n            duration: 1000,\n          }}\n          className=\"banner0-icon\"\n          key=\"icon\"\n        >\n          <Icon type=\"down\" />\n        </TweenOne>\n      </div>\n    );\n  }\n}\nexport default Banner;\n","import React from 'react';\nexport const Banner00DataSource = {\n  wrapper: { className: 'banner0 jy53s0ipjy-editor_css' },\n  textWrapper: { className: 'banner0-text-wrapper' },\n  title: {\n    className: 'banner0-title',\n    children: (\n      <>\n        <p>李敬知</p>\n      </>\n    ),\n  },\n  content: {\n    className: 'banner0-content',\n    children: (\n      <>\n        <p>快点长大，长大了自己维护。</p>\n      </>\n    ),\n  },\n  button: {\n    className: 'banner0-button',\n    children: (\n      <>\n        <p>更多</p>\n      </>\n    ),\n  },\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}